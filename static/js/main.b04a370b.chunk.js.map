{"version":3,"sources":["lib/ui/View.js","lib/ui/Graphics.js","components/PitchTimeChart.js","App.js","index.js"],"names":["View","PureComponent","constructor","props","margin","top","right","bottom","left","rowSpan","columnSpan","canResizeRows","canResizeColumns","super","onResize","increaseRows","rowlimit","this","state","outerHeight","viewSize","newSpan","viewHeight","setState","height","decreaseRows","increaseColumns","columnLimit","outerWidth","viewWidth","width","decreaseColumns","close","toggleView","name","getSizeControlHTML","className","onClick","title","disabled","icon","faArrowsAltV","faLongArrowAltUp","faArrowsAltH","faLongArrowAltLeft","faTimesCircle","resizeComponent","additionalState","ow","oh","drawNoteTrapezoid","ctx","x","y","height2","beginPath","moveTo","lineTo","closePath","fill","PitchTimeChart","componentDidMount","initialize","yAxisLabelType","overviewHeight","svg","select","selectAll","remove","scaleLinear","range","xOv","yOv","xAxis","axisBottom","yAxis","axisLeft","tickFormat","d","Midi","getMidiNoteByNr","label","Math","floor","xAxisEl","append","attr","call","yAxisEl","text","canvas","dpr","window","devicePixelRatio","rect","getBoundingClientRect","getContext","scale","setupCanvas","initialized","draw","drawNotes","notes","boxHeight","end","veloScale","domain","note","startPos","start","endPos","xPos","h","velocity","pitch","max","_this","time","showAllTime","midiLiveData","allNotes","clearRect","xDomain","low","high","extent","separatedByChannels","Array","from","group","channel","map","colors","schemeCategory10","boxHeight2","forEach","tr","i","fillStyle","length","fillRect","clipLeftRight","requestAnimationFrame","liveNotes","componentDidUpdate","render","style","gridArea","ref","n","transform","onChange","e","target","value","faToggleOn","faToggleOff","App","Component","innerWidth","innerHeight","getMidiLiveData","setMidiLiveData","data","addCurrentNote","newMap","Map","currentNotes","set","removeCurrentNote","delete","MidiInputManager","addEventListener","s","href","faGithub","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b04a370b.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowsAltH, faArrowsAltV, faLongArrowAltLeft, faLongArrowAltUp, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class View extends PureComponent {\r\n\r\n    /**\r\n     * @param {Props} props props\r\n     * @param {Obbject} margin margin\r\n     * @param {number} rowSpan number of rows this view initially has\r\n     * @param {number} colSpan number of columns this view initially has\r\n     * @param {boolean} canResizeRows allow to resize rows?\r\n     * @param {boolean} canResizeColumns allow to resize columns?\r\n     */\r\n    constructor(\r\n        props,\r\n        margin = { top: 0, right: 0, bottom: 0, left: 0 },\r\n        rowSpan = 1,\r\n        columnSpan = 1,\r\n        canResizeRows = true,\r\n        canResizeColumns = true,\r\n    ) {\r\n        super(props);\r\n        const { outerWidth, outerHeight } = props.viewSize;\r\n        const viewWidth = outerWidth * columnSpan;\r\n        const viewHeight = outerHeight * rowSpan;\r\n        this.state = {\r\n            rowSpan,\r\n            columnSpan,\r\n            canResizeRows,\r\n            canResizeColumns,\r\n            rowlimit: 12,\r\n            columnLimit: 2,\r\n            outerWidth,\r\n            outerHeight,\r\n            viewHeight,\r\n            viewWidth,\r\n            margin,\r\n            width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n            height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Views shoud overwrite this method,\r\n     * to react to resizing.\r\n     * This method is called by resizeComponent (see below).\r\n     */\r\n    onResize = () => { }\r\n\r\n    /**\r\n     * Resizes the component by updating the width and height depending on\r\n     * the received outerWidth and outerHeight props and the internal margin.\r\n     * After updating the state, the callback function will be called.\r\n     * @param {Object} component\r\n     * @param {Function} callback\r\n     * @param {Object} additionalState other properties to set in the state\r\n     */\r\n    resizeComponent(additionalState = {}) {\r\n        const { outerWidth, outerHeight } = this.props.viewSize;\r\n        const { outerWidth: ow, outerHeight: oh, margin, rowSpan, columnSpan } = this.state;\r\n        if (ow !== outerWidth || oh !== outerHeight) {\r\n            const viewWidth = outerWidth * columnSpan;\r\n            const viewHeight = outerHeight * rowSpan;\r\n            this.setState(\r\n                {\r\n                    ...additionalState,\r\n                    outerWidth,\r\n                    outerHeight,\r\n                    viewWidth,\r\n                    viewHeight,\r\n                    width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n                    height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n                },\r\n                this.onResize\r\n            );\r\n        }\r\n    }\r\n\r\n    increaseRows = () => {\r\n        const { rowSpan, rowlimit, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan >= rowlimit) { return; }\r\n        const newSpan = rowSpan + 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseRows = () => {\r\n        const { rowSpan, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan <= 1) { return; }\r\n        const newSpan = rowSpan - 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    increaseColumns = () => {\r\n        const { columnSpan, columnLimit, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan >= columnLimit) { return; }\r\n        const newSpan = columnSpan + 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseColumns = () => {\r\n        const { columnSpan, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan <= 1) { return; }\r\n        const newSpan = columnSpan - 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    close = () => {\r\n        const { toggleView, name } = this.props;\r\n        if (toggleView && name) {\r\n            toggleView(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the HTML (JSX) for the view size control buttons\r\n     */\r\n    getSizeControlHTML = () => (\r\n        <div className='sizeControl'>\r\n            {this.state.canResizeRows && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseRows\r\n                        }\r\n                        title={'Increase rows'}\r\n                        disabled={this.state.rowSpan >= this.state.rowlimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltV} />\r\n                    </button >\r\n                    <button\r\n                        onClick={this.decreaseRows}\r\n                        title={'Decrease rows'}\r\n                        disabled={this.state.rowSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltUp} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            {this.state.canResizeColumns && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseColumns}\r\n                        title={'Increase columns'}\r\n                        disabled={this.state.columnSpan >= this.state.columnLimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltH} />\r\n                    </button>\r\n                    <button\r\n                        onClick={this.decreaseColumns}\r\n                        title={'Decrease columns'}\r\n                        disabled={this.state.columnSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltLeft} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            <button\r\n                onClick={this.close}\r\n                title={'Close'}\r\n            >\r\n                <FontAwesomeIcon icon={faTimesCircle} />\r\n            </button>\r\n        </div >\r\n    );\r\n}\r\n","import { Utils } from \"musicvis-lib\";\nimport { curveMonotoneX, curveLinear, line } from \"d3-shape\";\nimport { scaleLinear } from \"d3-scale\";\nimport { extent, max } from \"d3-array\";\n\n\n/**\n * Sets up a canvas rescaled to device pixel ratio\n * From https://www.html5rocks.com/en/tutorials/canvas/hidpi/\n * @param {HTMLCanvasElement} canvas canvas element\n * @returns {CanvasRenderingContext2D} canvas rendering context\n */\nexport function setupCanvas(canvas) {\n    // Get the device pixel ratio, falling back to 1.\n    var dpr = window.devicePixelRatio || 1;\n    // Get the size of the canvas in CSS pixels.\n    var rect = canvas.getBoundingClientRect();\n    // Give the canvas pixel dimensions of their CSS\n    // Size times the device pixel ratio.\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    var ctx = canvas.getContext('2d');\n    // Scale all drawing operations by the dpr, so you\n    // don't have to worry about the difference.\n    ctx.scale(dpr, dpr);\n    return ctx;\n}\n\n\n/**\n * Draws horizontal bands with alternating color to better distinguish rows.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} rowHeight height of bnote boxes\n */\nexport function drawRowBands(ctx, margin, rows, rowHeight, width, fillStyle = 'rgba(128, 128, 128, 0.1)') {\n    const oldFill = ctx.fillStyle;\n    ctx.fillStyle = fillStyle;\n    const xPos = margin.left;\n    for (let i = 0; i < rows; i += 2) {\n        const yPos = margin.top + rowHeight * i;\n        ctx.fillRect(xPos, yPos, width, rowHeight);\n    }\n    ctx.fillStyle = oldFill;\n}\n\n/**\n * Draws a bar chart.\n * @param {CanvasRenderingContext2D} ctx canvas context\n * @param {number} x x position\n * @param {number} y y position\n * @param {number} width width\n * @param {number} height height\n * @param {number} maxVal maximum value towards the chart values are scaled\n * @param {number[]} values values to draw bars for\n * @param {string[]} colors color for each value entry\n */\nexport function drawBarChart(ctx, x, y, width, height, maxVal, values, colors) {\n    const w = width / values.length;\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        ctx.fillStyle = colors[i];\n        const h = (value / maxVal) * height;\n        const yPos = y + height - h;\n        ctx.fillRect(x + i * w, yPos, w - 2, h);\n    }\n}\n\n/**\n * Draws a stacked bar chart.\n * @param {CanvasRenderingContext2D} ctx canvas context\n * @param {number} x x position\n * @param {number} y y position\n * @param {number} width width\n * @param {number} height height\n * @param {number} maxVal maximum value towards the chart values are scaled\n * @param {number[]} values values to draw bars for\n * @param {string[]} colors color for each value entry\n */\nexport function drawStackedBarChart(ctx, x, y, width, height, maxVal, values, colors) {\n    let currentSum = 0;\n    // Stack values\n    for (let i = values.length - 1; i >= 0; i--) {\n        currentSum += values[i];\n        values[i] = currentSum;\n    }\n    for (let i = 0; i < values.length; i++) {\n        const val = values[i];\n        ctx.fillStyle = colors[i];\n        const h = (val / maxVal) * height;\n        const yPos = y + height - h;\n        ctx.fillRect(x, yPos, width, h);\n    }\n}\n\n/**\n * Draws a horizontal boxplot onto a canvas.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin width {top, right, left, bottom}\n * @param {Function} x D3 linear scale\n * @param {number} yPos y position\n * @param {number} plotHeight height of the plot\n * @param {number[]} data array of numbers to draw the boxplot for\n * @param {boolean} drawOutliers if true, outliers will be drawn as dots\n * @param {string} fillBox color for the box\n * @param {string} fillWhisk color for the whiskers\n */\nexport function drawBoxplot(\n    ctx,\n    margin,\n    x,\n    yPos,\n    plotHeight,\n    data,\n    drawOutliers = false,\n    fillBox = 'rgba(70, 130, 180, 0.8)',\n    fillWhisk = 'steelblue'\n) {\n    const { q1, q2, q3, r0, r1 } = Utils.getBoxplotCharacteristics(data);\n    // Get positions\n    const q1Pos = margin.left + x(q1);\n    const q2Pos = margin.left + x(q2);\n    const q3Pos = margin.left + x(q3);\n    const r0Pos = margin.left + x(r0);\n    const r1Pos = margin.left + x(r1);\n    const yCenter = yPos + plotHeight / 2;\n    // Box (with a gap for the median)\n    ctx.fillStyle = fillBox;\n    ctx.fillRect(q1Pos, yPos, q2Pos - q1Pos - 1, plotHeight);\n    ctx.fillRect(q2Pos + 1, yPos, q3Pos - q2Pos - 1, plotHeight);\n    ctx.fillStyle = fillWhisk;\n    // Left whisker\n    ctx.fillRect(r0Pos, yPos, 1, plotHeight);\n    ctx.fillRect(r0Pos, yCenter, q1Pos - r0Pos, 1);\n    // Right whisker\n    ctx.fillRect(r1Pos, yPos, 1, plotHeight);\n    ctx.fillRect(q3Pos, yCenter, r1Pos - q3Pos, 1);\n    // Draw outliers\n    if (drawOutliers) {\n        const outliers = data.filter(d => d < r0 || d > r1);\n        for (let ol of outliers) {\n            ctx.fillRect(margin.left + x(ol), yCenter, 2, 2);\n        }\n    }\n}\n\n/**\n * Draws a kernel density estimation (KDE) area chart for each pitch.\n * TODO: draw mean and quartiles like in a box plot\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin width {top, right, left, bottom}\n * @param {Function} x D3 linear scale\n * @param {number} yPos y position\n * @param {number} plotHeight height of the plot\n * @param {number[]} data array of numbers to draw the boxplot for\n * @param {boolean} smooth turn smoothing on and off\n * @param {string} fillStyle fill color\n * @param {number} bandwidth kernel bandwidth\n * @param {number} ticks number of ticks for which to compute a curve point\n */\nexport function drawKdeAreaChart(ctx, margin, x, yPos, plotHeight, data, smooth = true, fillStyle, bandwidth = 0.5, ticks = 100) {\n    const kde = Utils.kernelDensityEstimator(Utils.kernelEpanechnikov(bandwidth), x.ticks(ticks));\n    const estimate = kde(data);\n    // Force 0 for y value at start and end for correct drawing\n    estimate.unshift([estimate[0][0], 0]);\n    estimate.push([estimate[estimate.length - 1][0], 0]);\n    const y = scaleLinear()\n        .domain(extent(estimate, d => d[1]))\n        .range([yPos + plotHeight, yPos]);\n    // Smoothed or linearly interpolated area\n    const lineGenerator = line()\n        .x(d => margin.left + x(d[0]))\n        .y(d => y(d[1]))\n        .curve(smooth ? curveMonotoneX : curveLinear)\n        .context(ctx);\n    ctx.beginPath();\n    lineGenerator(estimate);\n    ctx.closePath();\n    ctx.fillStyle = fillStyle;\n    ctx.fill();\n}\n\n/**\n * Draws a violinplot (a mirrored KDE area chart).\n * TODO: draw mean and quartiles like in a box plot\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin width {top, right, left, bottom}\n * @param {Function} x D3 linear scale\n * @param {number} yPos y position\n * @param {number} plotHeight height of the plot\n * @param {number[]} data array of numbers to draw the boxplot for\n * @param {boolean} smooth turn smoothing on and off\n * @param {string} fillStyle fill color\n * @param {number} bandwidth kernel bandwidth\n * @param {number} ticks number of ticks for which to compute a curve point\n */\nexport function drawViolinPlot(ctx, margin, x, yPos, plotHeight, data, smooth = true, fillStyle, bandwidth = 0.5, ticks = 100) {\n    const kde = Utils.kernelDensityEstimator(Utils.kernelEpanechnikov(bandwidth), x.ticks(ticks));\n    const estimate = kde(data);\n    // Force 0 for y value at start and end for correct drawing\n    estimate.unshift([estimate[0][0], 0]);\n    estimate.push([estimate[estimate.length - 1][0], 0]);\n    const maxEst = max(estimate, d => d[1]);\n    const y = scaleLinear()\n        .domain([-maxEst, maxEst])\n        .range([yPos + plotHeight, yPos]);\n    // Smoothed or linearly interpolated area\n    const lineGeneratorTop = line()\n        .x(d => margin.left + x(d[0]))\n        .y(d => y(d[1]))\n        .curve(smooth ? curveMonotoneX : curveLinear)\n        .context(ctx);\n    const lineGeneratorBottom = line()\n        .x(d => margin.left + x(d[0]))\n        .y(d => y(-d[1]))\n        .curve(smooth ? curveMonotoneX : curveLinear)\n        .context(ctx);\n    ctx.fillStyle = fillStyle;\n    ctx.beginPath();\n    lineGeneratorTop(estimate);\n    ctx.closePath();\n    ctx.fill();\n    ctx.beginPath();\n    lineGeneratorBottom(estimate);\n    ctx.closePath();\n    ctx.fill();\n}\n\n\n/**\n  * Draws a drum note shape to the canvas.\n  * @param {CanvasRenderingContext2D} ctx canvas context\n  * @param {string} shape one of [triangle, <>, x, o, ostroke, xstroke]\n  * @param {number} x x position\n  * @param {number} y y position\n  * @param {number} size size (width and height of the symbols outer bounds)\n  */\nexport function drawDrumNoteShape(ctx, shape, x, y, size) {\n    const halfSize = size * 0.4;\n    switch (shape) {\n        case 'triangle':\n            drawTriangle(ctx, x, y, halfSize);\n            break;\n        case '<>':\n            drawDiamond(ctx, x, y, halfSize);\n            break;\n        case 'x':\n            drawX(ctx, x, y, halfSize);\n            break;\n        case 'o':\n            drawFilledCircle(ctx, x, y, halfSize);\n            break;\n        case 'ostroke':\n            drawFilledCircle(ctx, x, y, halfSize);\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.moveTo(x - halfSize, y - halfSize);\n            ctx.lineTo(x + halfSize, y + halfSize);\n            ctx.stroke();\n            ctx.lineWidth = 1;\n            break;\n        case 'xstroke':\n            drawX(ctx, x, y, halfSize);\n            ctx.lineWidth = 3;\n            ctx.beginPath();\n            ctx.moveTo(x - halfSize, y);\n            ctx.lineTo(x + halfSize, y);\n            ctx.stroke();\n            ctx.lineWidth = 1;\n            break;\n        default:\n            console.warn(`Unsupported shape ${shape}`);\n    }\n}\n\n/**\n * Draws a stroked circle.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} radius radius\n */\nexport function drawCircle(ctx, x, y, radius) {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, 2 * Math.PI);\n    ctx.stroke();\n}\n\n/**\n * Draws a filled circle.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} radius radius\n */\nexport function drawFilledCircle(ctx, x, y, radius) {\n    if (radius < 0) {\n        console.error(`Cannot draw circle with negative radius of ${radius}`);\n    }\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, 2 * Math.PI);\n    ctx.fill();\n}\n\n/**\n * Draws a filled triangle like this: /\\\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} halfSize half of the size\n */\nexport function drawTriangle(ctx, x, y, halfSize) {\n    ctx.beginPath();\n    ctx.moveTo(x - halfSize, y + halfSize);\n    ctx.lineTo(x + halfSize, y + halfSize);\n    ctx.lineTo(x, y - halfSize);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws a diamond like this: <>\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} halfSize half of the size\n */\nexport function drawDiamond(ctx, x, y, halfSize) {\n    ctx.beginPath();\n    ctx.moveTo(x - halfSize, y);\n    ctx.lineTo(x, y - halfSize);\n    ctx.lineTo(x + halfSize, y);\n    ctx.lineTo(x, y + halfSize);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws an X\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} halfSize half of the size\n */\nexport function drawX(ctx, x, y, halfSize) {\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(x - halfSize, y - halfSize);\n    ctx.lineTo(x + halfSize, y + halfSize);\n    ctx.moveTo(x - halfSize, y + halfSize);\n    ctx.lineTo(x + halfSize, y - halfSize);\n    ctx.stroke();\n    ctx.lineWidth = 1;\n}\n\n/**\n * Draws a trapezoid that looks like a rectangle but gets narrower at the right\n * end, so better show where one ends and the next begins.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of top left\n * @param {number} y y coordinate of top left\n * @param {number} width width\n * @param {number} height height (of left side)\n * @param {number} height2 height (of right side)\n */\nexport function drawNoteTrapezoid(ctx, x, y, width, height, height2) {\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.lineTo(x, y + height);\n    ctx.lineTo(x + width, y + (height / 2 + height2 / 2));\n    ctx.lineTo(x + width, y + (height / 2 - height2 / 2));\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws a trapezoid that looks like a rectangle but gets narrower at the top\n * end, so better show where one ends and the next begins.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of bounding rect's top left\n * @param {number} y y coordinate of bounding rect's top left\n * @param {number} width width (of bounding rect / bottom side)\n * @param {number} height height\n * @param {number} width2 width (of top side)\n */\nexport function drawNoteTrapezoidUpwards(ctx, x, y, width, height, width2) {\n    ctx.beginPath();\n    ctx.lineTo(x, y + height);\n    ctx.lineTo(x + width, y + height);\n    ctx.lineTo(x + (width / 2 + width2 / 2), y);\n    ctx.lineTo(x + (width / 2 - width2 / 2), y);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws an arc that connects similar parts.\n * Both parts must have the same width in pixels.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} startX1 x coordinate of the start of the first part\n * @param {number} startX2 x coordinate of the start of the second part\n * @param {number} length length in pixels of the parts\n * @param {number} yBottom bottom baseline y coordinate\n */\nexport function drawArc(ctx, startX1, startX2, length, yBottom) {\n    // Get center and radius\n    const radius = (startX2 - startX1) / 2;\n    const cx = startX1 + radius + length / 2;\n    ctx.lineWidth = length;\n    ctx.beginPath();\n    ctx.arc(cx, yBottom, radius, Math.PI, 2 * Math.PI);\n    ctx.stroke();\n}\n\n/**\n * Draws a more complex path and fills it.\n * Two arcs: One from startX1 to endX2 on the top, one from endX1 to startX2\n * below it.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} startX1 x coordinate of the start of the first part\n * @param {number} endX1 x coordinate of the end of the first part\n * @param {number} startX2 x coordinate of the start of the second part\n * @param {number} endX2 x coordinate of the end of the second part\n * @param {number} endX2 x coordinate of the end of the second part\n * @param {number} yBottom bottom baseline y coordinate\n */\nexport function drawAssymetricArc(ctx, startX1, endX1, startX2, endX2, yBottom) {\n    // Get center and radius\n    const radiusTop = (endX2 - startX1) / 2;\n    if (radiusTop < 0) {\n        return;\n    }\n    let radiusBottom = (startX2 - endX1) / 2;\n    if (radiusBottom < 0) {\n        radiusBottom = 0;\n    }\n    const cxTop = startX1 + radiusTop;\n    const cxBottom = endX1 + radiusBottom;\n    ctx.beginPath();\n    ctx.moveTo(startX1, yBottom);\n    ctx.arc(cxTop, yBottom, radiusTop, Math.PI, 2 * Math.PI);\n    ctx.lineTo(startX2, yBottom);\n    ctx.arc(cxBottom, yBottom, radiusBottom, 2 * Math.PI, Math.PI, true);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws a line indicating the current player time\n * @param {number} currentPlayerTime current player time in seconds\n * @param {Function} x D3 scaleLinear for x axis\n */\nexport function drawCurrentTimeIndicator(ctx, currentPlayerTime, x, height, margin) {\n    if (currentPlayerTime === null) {\n        return;\n    }\n    const xPos = margin.left + x(currentPlayerTime) - 1;\n    ctx.fillRect(xPos, margin.top, 2, height);\n}\n\n/**\n * Clips left and right of a visualization by clearing parts of the canvas.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin {top, right, bottom, left}\n * @param {number} width width of the area to clip around\n * @param {number} height height of the clipping area\n */\nexport function clipLeftRight(ctx, margin, width, height) {\n    ctx.clearRect(0, margin.top, margin.left, height);\n    ctx.clearRect(margin.left + width, margin.top, margin.right, height);\n}\n\n/**\n * Draws measure lines and tempo and beat type information\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} parsedXml parsed MusicXML data\n * @param {Object} margin {top, right, bottom, left}\n * @param {number} width width\n * @param {number} height height\n * @param {Function} x D3 linear scale\n */\nexport function drawMusicXmlInformation(ctx, parsedXml, margin, width, height, x) {\n    // Draw measure lines\n    ctx.fillStyle = 'rgba(128, 128, 128, 0.5)';\n    for (let i = 0; i < parsedXml.measureLinePositions.length; i++) {\n        const line = parsedXml.measureLinePositions[i];\n        const xPos = x(line);\n        // Do not draw invisible lines\n        if (xPos < 0) { continue; }\n        if (xPos > width) { break; }\n        const pos = margin.left + xPos;\n        ctx.fillRect(pos, margin.top, 2, height);\n        // Draw measure number\n        if ((i + 2) % 4 === 0) {\n            ctx.fillStyle = '#888';\n            ctx.fillText(i + 2, pos + 10, margin.top);\n            ctx.fillStyle = 'rgba(128, 128, 128, 0.5)';\n        }\n    }\n    const xOffs = margin.left + 15;\n    ctx.fillStyle = '#888';\n    // Draw tempo changes\n    for (let t of parsedXml.tempoChanges) {\n        ctx.fillText(`${t.tempo} bpm`, xOffs + x(t.time), margin.top - 20);\n    }\n    // Draw beatType changes\n    for (let b of parsedXml.beatTypeChanges) {\n        ctx.fillText(`${b.beats} / ${b.beatType}`, xOffs + x(b.time), margin.top - 8);\n    }\n}\n","import React from 'react';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { extent, group } from 'd3-array';\r\nimport { axisBottom, axisLeft } from 'd3-axis';\r\nimport { select } from 'd3-selection';\r\nimport View from '../lib/ui/View';\r\nimport { schemeCategory10 } from 'd3-scale-chromatic';\r\nimport { drawNoteTrapezoid, setupCanvas, clipLeftRight } from '../lib/ui/Graphics';\r\nimport { Midi } from 'musicvis-lib';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faToggleOn, faToggleOff } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nexport default class PitchTimeChart extends View {\r\n\r\n    constructor(props) {\r\n        const margin = { top: 45, right: 30, bottom: 60, left: 65 };\r\n        super(props, margin);\r\n        this.state = {\r\n            ...this.state,\r\n            overviewHeight: 40,\r\n            showAllTime: false,\r\n            // pitch, note, drums\r\n            yAxisLabelType: 'pitch',\r\n            boxHeight: null,\r\n            notes: [],\r\n            liveNotes: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => this.initialize();\r\n\r\n    onResize = () => this.initialize();\r\n\r\n    componentDidUpdate() {\r\n        this.resizeComponent();\r\n        // TODO: check if GT and rec have changed, if not only draw player time\r\n        // if (this.state.initialized) {\r\n        //     this.draw(this);\r\n        // }\r\n    }\r\n\r\n    initialize = () => {\r\n        const { width, height, yAxisLabelType } = this.state;\r\n        const overviewHeight = height * 0.25;\r\n        const svg = select(this.svg);\r\n        svg.selectAll('*').remove();\r\n        // Scales\r\n        const x = scaleLinear().range([2, width]);\r\n        const xOv = scaleLinear().range([2, width]);\r\n        const y = scaleLinear().range([height, overviewHeight + 25]);\r\n        const yOv = scaleLinear().range([overviewHeight, 0]);\r\n        // Axes\r\n        const xAxis = axisBottom(x);\r\n        // TODO: allow to switch between MIDI nr and note name and drum label\r\n        const yAxis = axisLeft(y);\r\n        if (yAxisLabelType === 'note') {\r\n            yAxis.tickFormat(d => Midi.getMidiNoteByNr(d)?.label);\r\n        } else {\r\n            yAxis.tickFormat(d => Math.floor(d));\r\n        }\r\n        const xAxisEl = svg.append('g')\r\n            .attr('class', 'axis')\r\n            .attr('transform', `translate(0, ${height})`)\r\n            .call(xAxis);\r\n        const yAxisEl = svg.append('g')\r\n            .attr('class', 'axis')\r\n            .call(yAxis);\r\n        // Labels\r\n        svg.append('text')\r\n            .attr('class', 'yAxisLabel')\r\n            .text('Pitch')\r\n            .attr('transform', `rotate(90) translate(${(height + overviewHeight) / 2}, ${45})`);\r\n        // Setup canvas rescaled to device pixel ratio\r\n        setupCanvas(this.canvas);\r\n        this.setState(\r\n            { initialized: true, svg, x, xOv, y, yOv, xAxis, yAxis, xAxisEl, yAxisEl, overviewHeight },\r\n            () => this.draw(this, 0)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Draws the note retangles.\r\n     * @param {CanvasRenderingContext2D} ctx canvas rendering context\r\n     * @param {Notes[]} notes notes with start, end, pitch\r\n     * @param {number} boxHeight height of each pitch-line\r\n     * @param {Function} x D3 linearScale x scale\r\n     * @param {Function} y D3 linearScale y scale\r\n     */\r\n    drawNotes = (ctx, notes, boxHeight, x, y, end) => {\r\n        const { width, margin } = this.state;\r\n        const veloScale = scaleLinear()\r\n            .domain([0, 127])\r\n            .range([boxHeight * 0.1, boxHeight]);\r\n        for (let note of notes) {\r\n            const startPos = x(note.start);\r\n            const noteEnd = note.end === null ? end : note.end;\r\n            const endPos = x(noteEnd);\r\n            // Do not draw invisible notes\r\n            if (endPos < 0 || startPos > width) {\r\n                continue;\r\n            }\r\n            const xPos = margin.left + startPos;\r\n            const h = veloScale(note.velocity);\r\n            const yPos = margin.top + y(note.pitch) - h / 2;\r\n            const w = Math.max(endPos - startPos, 1);\r\n            drawNoteTrapezoid(ctx, xPos, yPos, w, h, h / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Main drawing function\r\n     */\r\n    draw = (_this, time) => {\r\n        const { viewWidth, viewHeight, margin, width, height, overviewHeight, x, xOv, y, yOv, xAxis, yAxis, xAxisEl, yAxisEl, showAllTime } = _this.state;\r\n        const { midiLiveData } = _this.props;\r\n        const allNotes = midiLiveData;\r\n        // Prepare main and highlight canvas\r\n        const ctx = _this.canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, viewWidth, viewHeight);\r\n        // Set x scale domain\r\n        const end = time / 1000;\r\n        const xDomain = [0, end];\r\n        xOv.domain(xDomain);\r\n        if (showAllTime) {\r\n            // Show all notes\r\n            x.domain(xDomain);\r\n        } else {\r\n            x.domain([end - 20, end]);\r\n        }\r\n        xAxisEl.call(xAxis);\r\n        // Set y scale domain\r\n        const [low, high] = extent(allNotes, d => d.pitch);\r\n        y.domain([+low - 1, +high + 1]);\r\n        yOv.domain([+low - 1, +high + 1]);\r\n        yAxisEl.call(yAxis);\r\n        // If only one track, use color for channels\r\n        // and allow to only show a single channel\r\n        const separatedByChannels = Array.from(group(allNotes, d => d.channel)).map(d => d[1]);\r\n        // Draw notes onto canvas\r\n        const colors = schemeCategory10;\r\n        const boxHeight = height / (high - low + 3);\r\n        const boxHeight2 = overviewHeight / (high - low + 1);\r\n        separatedByChannels.forEach((tr, i) => {\r\n            ctx.fillStyle = colors[i % colors.length];\r\n            _this.drawNotes(ctx, tr, boxHeight, x, y, end);\r\n            _this.drawNotes(ctx, tr, boxHeight2, xOv, yOv, end);\r\n        });\r\n        // Separator between overview and main visualization\r\n        ctx.fillStyle = '#888';\r\n        ctx.fillRect(margin.left, margin.top + overviewHeight + 12, width, 1);\r\n        clipLeftRight(ctx, margin, width, height);\r\n        requestAnimationFrame((time) => this.draw(this, time))\r\n    }\r\n\r\n    render() {\r\n        const { viewWidth, viewHeight, margin } = this.state;\r\n        return (\r\n            <div\r\n                className='View PitchTimeChart'\r\n                style={{ gridArea: `span ${this.state.rowSpan} / span ${this.state.columnSpan}` }}\r\n            >\r\n                <canvas\r\n                    className='ViewCanvas'\r\n                    ref={n => this.canvas = n}\r\n                    style={{ width: viewWidth, height: viewHeight }}\r\n                />\r\n                <svg\r\n                    width={viewWidth}\r\n                    height={viewHeight}\r\n                >\r\n                    <text\r\n                        className='heading'\r\n                        x={viewWidth / 2}\r\n                        y={20}\r\n                    >\r\n                        Note-Time Chart for WebMIDI\r\n                    </text>\r\n                    <g\r\n                        ref={n => this.svg = n}\r\n                        transform={`translate(${margin.left}, ${margin.top})`}\r\n                    />\r\n                    <text\r\n                        className='yAxisLabel'\r\n                        x={viewWidth / 2}\r\n                        y={viewHeight - 15}\r\n                    >\r\n                        Time in seconds\r\n                    </text>\r\n                </svg>\r\n                <div className='viewControls'>\r\n                    <div>\r\n                        <select\r\n                            title='Y-axis labels'\r\n                            onChange={(e) => this.setState({ yAxisLabelType: e.target.value }, this.initialize)}\r\n                        >\r\n                            <option value='pitch'>MIDI note</option>\r\n                            <option value='note'>Note name</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            title='Toggles between showing the whole time or last 20 seconds'\r\n                            onClick={() => this.setState({ showAllTime: !this.state.showAllTime })}\r\n                        >\r\n                            <FontAwesomeIcon icon={this.state.showAllTime ? faToggleOn : faToggleOff} />&nbsp;\r\n                        Show whole time\r\n                    </button>\r\n                    </div>\r\n                    <div>\r\n                        {this.props.midiLiveData.length} notes\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './style/App.css';\r\n// Views\r\nimport PitchTimeChart from './components/PitchTimeChart';\r\n// API, data etc.\r\nimport { MidiInputManager } from 'musicvis-lib';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // Setup MIDI input\r\n        new MidiInputManager(\r\n            this.getMidiLiveData,\r\n            this.setMidiLiveData,\r\n            this.addCurrentNote,\r\n            this.removeCurrentNote\r\n        );\r\n        this.state = {\r\n            viewSize: {\r\n                outerWidth: 800,\r\n                outerHeight: 600\r\n            },\r\n            midiLiveData: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Scale layout to current screen size\r\n        window.addEventListener('resize', this.onResize, false);\r\n        this.onResize();\r\n    }\r\n\r\n    /**\r\n     * Updates the size state when the window size changes\r\n     * so views can react and redraw\r\n     */\r\n    onResize = () => {\r\n        this.setState({\r\n            viewSize: {\r\n                outerWidth: Math.floor(window.innerWidth - 20),\r\n                outerHeight: Math.floor(window.innerHeight - 100)\r\n            }\r\n        });\r\n    }\r\n\r\n    getMidiLiveData = () => this.state.midiLiveData;\r\n\r\n    /**\r\n     * Setter for MIDI input from an instrumetn\r\n     * @param {Note[]} data array with notes\r\n     */\r\n    setMidiLiveData = (data) => {\r\n        // Work-around so note_off event handling can immediately find the note_on event\r\n        // eslint-disable-next-line\r\n        this.state.midiLiveData = data;\r\n        this.setState({ midiLiveData: data });\r\n    };\r\n\r\n    /**\r\n     * Adds a note that is currently played (e.g. keyboard key pressed)\r\n     * @param {Note} note a note\r\n     */\r\n    addCurrentNote = (note) => {\r\n        const newMap = new Map(this.state.currentNotes);\r\n        newMap.set(note.pitch, note);\r\n        this.setState({ currentNotes: newMap });\r\n    }\r\n\r\n    /**\r\n     * Removes a currently played note (e.g. keyboard key no longer pressed)\r\n     * @param {number} pitch pitch of the note to remove\r\n     */\r\n    removeCurrentNote = (pitch) => {\r\n        const newMap = new Map(this.state.currentNotes);\r\n        newMap.delete(pitch);\r\n        this.setState({ currentNotes: newMap });\r\n    }\r\n\r\n    render() {\r\n        const s = this.state;\r\n        return (\r\n            <div className={`App dark`} >\r\n                <PitchTimeChart\r\n                    name='Note-Time Chart'\r\n                    viewSize={s.viewSize}\r\n                    midiLiveData={s.midiLiveData}\r\n                />\r\n                <div className='githubLink'>\r\n                    <a href='https://github.com/fheyen/midi-live-vis'>\r\n                        <FontAwesomeIcon icon={faGithub} />&nbsp;\r\n                        https://github.com/fheyen/midi-live-vis\r\n                    </a>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}